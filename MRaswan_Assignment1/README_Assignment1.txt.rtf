{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red32\green32\blue32;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c16762\c16763\c16741;}
\margl1440\margr1440\vieww12260\viewh14580\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 Meghna Raswan\
2337415\
raswan@chapman.edu\
CPSC 230-10 (1515)\
Assignment 1\
\
Celcius.py\
Quadratic.py\
Seconds.py\
TotalPrice.py\
\
For the Celcius.py, Quadratic.py, and the TotalPrice.py programs, I have assigned variables to the desired input of the user as a sting, whether it was for the price of an item and its tax rate, the values for a, b, and c for the quadratic formula, or the value of the temperature in Celsius. Then, I would convert the stings to a float, giving the numbers inputted by the users a numerical value. From this conversion, I would calculate either the total price, the roots of the quadratic formula, or the temperature in Fahrenheit. Lastly, all 3 of these programs would similarly end by reporting back to the user what the desired value they were looking for. For the Seconds.py program, however, I used the if-else statements, executing the program if the input value of seconds is within 1 and 86400 seconds, and failing to run the program if the input value was out of the range. Usually factors that wouldn\'92t allow the programs to run is if the string was not converted to either a float or an integer because the mathematical processes would not get solved since strings do not have numerical values.\
\
As I got stuck on the Seconds.py  problem, I used https://www.w3resource.com/python-exercises/python-basics-exercise-65.php to help me figure out the mathematical concept on how to convert seconds to hours, minutes, and seconds. }